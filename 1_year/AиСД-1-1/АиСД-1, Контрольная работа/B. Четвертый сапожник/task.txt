

B. Четвертый сапожник


Ограничение времени
2 секунды


Ограничение памяти
64Mb


Ввод
стандартный ввод или input.txt


Вывод
стандартный вывод или output.txt





Сапожнику поступило k заказов. Он должен выполнить их все. Для каждого заказа указано, через сколько дней его необходимо выполнить, и сумма в рублях,
            которую готов заплатить заказчик за своевременное выполнение заказа. Также сапожник оценил число дней, которое потребуется
            ему на выполнение каждого заказа.
         Начав выполнять заказ, сапожник доводит его до конца, не отвлекаясь на прочие заказы (и вообще ни на что). Закончив один заказ,
         сапожник не готов в тот же день приниматься за следующий.
      
Если сапожник сдаёт работу позже срока, он обязан вернуть заказчику по 100 рублей за каждый просроченный день. Например, если
         сапоги нужны через три дня, а сапожник их изготовит только через пять дней, за выполнение этого заказа он получит на 200 рублей
         меньше. Если, скажем, изначально заказчик был готов заплатить 150 рублей, то окажется, что сапожник работал себе в минус,
         не только изготовив сапоги, но еще и заплатив за это заказчику 50 рублей.
      
Если же сапожник сдаёт работу раньше срока, то уже заказчик платит ему по 100 рублей за каждый день, оставшийся до срока.
         Например, если сапоги нужны через восемь дней, а сапожник выполнил его на четвертый день, он получает дополнительные 400 рублей.
      
Определите максимально возможную выручку сапожника за выполненные заказы. 

Формат ввода

В первой строке вводится число k (1 ≤ k ≤ 106).
         Следующие k строк описывают заказы. Каждая из них содержит целые числа pi, ti и di (0 ≤ pi ≤ 105, 1 ≤ ti, di ≤ 106) — соответственно стоимость заказа, число дней, требующееся для его выполнения, и срок выполнения заказа. 
      

Формат вывода

Выведите единственное целое число — максимально возможную выручку сапожника за выполненные заказы.
Пример 1



Ввод
Вывод




3
1000 2 3
1200 1 2
5000 5 8

7300




Пример 2



Ввод
Вывод




5
1000 2 7
2000 3 5
3000 2 4
1000 2 5
1000 2 1

7100




