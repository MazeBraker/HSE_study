

A. Множество чисел


Ограничение времени
3 секунды


Ограничение памяти
64Mb


Ввод
стандартный ввод или input.txt


Вывод
стандартный вывод или output.txt





Реализуйте структуру данных, являющуюся множеством целых чисел. Структура должна поддерживать вставку, проверку существования
            и удаление элементов. Реализация должна основываться на хеш-таблице с разрешением коллизий методом цепочек.
         
Формат ввода

Первая строка входного файла содержит число запросов N (0 ≤ N ≤ 106). 
         Следующие N строк содержат запросы, представленные двумя целыми числами ti и xi (-1 ≤ ti ≤ 1, |xi| ≤ 109). 
      
Если ti равняется 1, добавьте число к множеству. Если ti равняется -1, удалите число из множества. Если ti равняется нулю, выведите 1 или 0 в зависимости от того, есть это число в множестве или нет. 
      
Не гарантируется, что на момент добавления числа, его нет в множестве. Не гарантируется, что на момент удаления числа, оно
         есть в множестве. Повторно вставлять элементы в множество не следует, то есть это именно множество с точки зрения математики.
      

Формат вывода

На каждый запрос проверки наличия элемента выведите 1 или 0, по одному в строке.
         
Пример 1



Ввод
Вывод




9
0 0
1 0
0 0
1 0
0 0
-1 0
0 0
-1 0
0 0

0
1
1
0
0




Пример 2



Ввод
Вывод




10
1 0
1 2
1 4
1 6
1 8
0 1
0 2
0 3
0 4
0 5

0
1
0
1
0




Примечания

Обратите особое внимание на выбор числа корзин и хеширующей функции. Если корзин будет слишком много, вы будете потреблять
            слишком много памяти. Если их слишком мало, то из-за большого числа коллизий вы будете медленно обрабатывать запросы. Если
            вы плохо выберете хеширующую функцию, это приведет к большому числу коллизий. Если вы выберете слишком сложную функцию, то
            вы будете тратить слишком много времени на ее подсчет.
         
