

B. Боб и дерево


Ограничение времени
4 секунды


Ограничение памяти
64Mb


Ввод
стандартный ввод или input.txt


Вывод
стандартный вывод или output.txt





Бобу для сдачи сессии необходимо реализовать классическое красно-черное дерево. Дерево должно уметь вставлять элемент по ключу
            и проверять наличие элемента по ключу. 
         При вставке уже существующего ключа новый элемент необходимо проигнорировать. 
После всех запросов нужно будет вывести само дерево, образованное выполнением всех запросов. 
В коде вашей программы запрещается использовать контейнеры из стандартной библиотеки, позволяющие эффективно работать с множествами.


Формат ввода

Первая строка входного файла содержит натуральное число N — число запросов к структуре данных (1 ≤ N ≤ 106). 
         Последующие N строк содержат по два целых числа ti и vi (ti ∈ {0, 1}, |vi| ≤ 109) — запросы к структуре данных. 
         
0 vi — вставить в дерево ключ vi; 
            
1 vi — проверить наличие ключа vi в дереве. 
            



Формат вывода

На каждый запрос поиска выведите "Yes", если указанный ключ присутствует в дереве, и "No" в противном случае. После ответов
            на запросы нужно вывести само дерево в следующем формате. Сначала должно быть целое число N — количество вершин в дереве. В следующих N строках нужно вывести описание очередной вершины. Каждое описание должно иметь формат:KEY LEFTKEY RIGHTKEY COLOR, где KEY — ключ в вершнины. LEFTKEY и RIGHTKEY — ключи левого и правого сына (null, если соответствующий сын фиктивная листовая вершина NIL), COLOR — символ R или B в зависимости от цвета. Описание можно выводить в произвольном порядке.
         
Пример



Ввод
Вывод




7
0 -3
1 0
0 0
0 0
1 0
1 -3
1 7

No
Yes
Yes
No
2
-3 null 0 B
0 null null R




Примечания

Боб хочет сдать задачу за минимальное количество попыток, поэтому он догадался, что можно проверять не только правильность
            выполнения своих тестов, но и свойства красно-черного дерева (это очень просто делать прямо во время исполнения программы
            после каждой операции с деревом). 
         Однако, он понимает, что отправлять такой код в тестирующую систему нельзя - полный обход дерева во время проверки занимает
         линейное время и итоговая асимптотика решения получается квадратичной, если не выключить проверку перед сдачей. 
      
Проверять нужно свойства вообще дерева поиска и свойства именно красно-черного дерева.

