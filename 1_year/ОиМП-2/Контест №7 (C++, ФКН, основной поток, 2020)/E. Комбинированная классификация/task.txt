

E. Комбинированная классификация


Ограничение времени
1 секунда


Ограничение памяти
64Mb


Ввод
стандартный ввод или input.txt


Вывод
стандартный вывод или output.txt





Маша устроилась на стажировку в стартап, и ее первое задание связно с автоматической классификацией текстов. Компания разрабатывает программу, которая обрабатывает всевозможные тексты в новостных лентах на компьютере, телефоне или
         любом другом устройстве пользователя, и находит среди них интересные для данного пользователя. Они даже уже разработали модель,
         которая умеет это делать, но вот беда — она занимает слишком много памяти и работает слишком долго. Поэтому они решили сделать классификацию двухэтапной: сначала
         запускается простая и быстрая модель, которая хорошо работает для большинства текстов; также она умеет обнаруживать, что не
         справляется с данным текстом, и в этом случае запускается сложная модель. Задача Маши состоит в том, чтобы реализовать этот
         двухэтапный подход и создать единый класс, классифицирующий объекты; помогите ей это сделать. 
      
Базовые классификаторы определены в файле "classifiers.h", который необходимо подключить в программе (пример для тестирования:
         https://gist.github.com/alexeyum/fdfc5127977a33a9b01f3f4177bfbc15). Сложный классификатор задается классом MainClassifier, а быстрый классификатор задается классом FastClassifier. Для простоты
         считайте, что оба классификатора создаются с помощью конструктора, который принимает на вход один экземпляр std::string. Также
         у обоих классификаторов есть функция double classify(const string& s), которая возвращает результат на данной строке. При
         этом эта функция у класса FastClassifier может сгенерировать исключение TooHardObjectException(), оповещая тем самым, что
         необходимо использовать более сложный классификатор. Вам необходимо реализовать класс CombinedClassifier, который создается
         с помощью конструктора, принимающего две строки (первую для быстрого классификатора, и вторую для основного классификатора)
         и имеет функцию double classify(const string& s). 
      
Обратите внимание на следующие требования к эффективности класса: 


MainClassifier::classify работает долго, поэтому вызывать его нужно тогда и только тогда, когда FastClassifier::classify создал
               исключение TooHardObjectException(). 
            
MainClassifier требует очень много времени на создание экземпляра (необходимо скачать много данных с сервера, распаковать
               их и т. п.), но используется очень редко. Поэтому иногда бывает, что за одну сессию он ни разу не потребуется — тогда и скачивать его не нужно. 
            
MainClassifier занимает очень много памяти, поэтому больше одного экземпляра этого класса создавать в программе нельзя. 
FastClassifier тоже требует некоторое время на инициализацию, поэтому не стоит зря создавать его для каждого объекта — создайте его один раз в самом начале в конструкторе Вашего класса. 



