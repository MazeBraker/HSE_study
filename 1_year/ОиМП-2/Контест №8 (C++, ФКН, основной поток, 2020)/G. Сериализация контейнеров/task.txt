

G. Сериализация контейнеров


Ограничение времени
1 секунда


Ограничение памяти
64Mb


Ввод
стандартный ввод или input.txt


Вывод
стандартный вывод или output.txt





Вам нужно написать функции для бинарной сериализации и десериализации (то есть, записи/чтения в поток) примитивных типов,
            строк, а также контейнеров std::vector и std::map, шаблонные параметры которых - типы такого же вида. Например, ваша функция
            должна уметь сериализовать контейнер std::vector<std::map<int, std::string>>. 
         Заголовки функций, которые вам надо написать, представлены здесь: https://clck.ru/CWHJd. 
      
Формат сериализации контейнеров должен быть таким: сначала записывается число типа size_t - размер контейнера, а затем уже
         сами элементы. Для std::map записывайте элементы как пары, состоящие из ключа и значения. Функции Deserialize должны восстанавливать
         исходный объект по сериализованному представлению.
      

Формат ввода

Пусть, например, требуется сериализовать std::map<uint32_t, std::string> m = { {1, "hello"}, {2, "bye"} };

Формат вывода

На 64-битной платформе с порядком байт little-endian результат должен получиться таким: https://clck.ru/CWH6A (тут показан вывод утилиты hd, применённый к полученному бинарному файлу). 
         
Примечания

Для простоты в этой задаче не нужно учитывать выравнивание (alignment) и можно считать, что порядок байт (endianness) при
            сериализации и десериализации будет одинаковым. 
         Используйте для записи и чтения байтов функции write и read у потоков типа std::ostream и std::istream. Подробнее про них
         можно прочитать здесь: 
      
http://en.cppreference.com/w/cpp/io/basic_ostream/write

http://en.cppreference.com/w/cpp/io/basic_istream/read



