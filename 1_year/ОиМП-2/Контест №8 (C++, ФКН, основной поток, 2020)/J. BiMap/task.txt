

J. BiMap


Ограничение времени
1 секунда


Ограничение памяти
64Mb


Ввод
стандартный ввод или input.txt


Вывод
стандартный вывод или output.txt





Все вы знаете контейнер std::map, который сопоставляет уникальным ключам значение. Представим теперь, что мы работаем с данными, у которых бывает два типа ключей. Например, студента можно задать номером студенческого
         билета или логином в системе. При этом не обязательно заданы оба ключа: например, у студента может ещё не быть логина. 
      
Вам надо написать класс BiMap, к которому можно обратиться за значением по одному из двух типов ключей. Вот заготовка для
         вашего класса: https://clck.ru/FNDyB. 
      
Функция Insert пытается вставить новое значение в хранилище. Ей могут быть указаны какой-то один или оба ключа (поэтому ключи
         передаются через std::optional). Если оба ключа не заданы, или если один из ключей уже есть в хранилище, функция должна сгенерировать
         исключение std::invalid_argument с каким-либо текстовым параметром. 
      
Функции GetByPrimaryKey и GetBySecondaryKey должны вернуть значение по ключу соответствующего типа. Они очень похожи на функцию
         at в std::map: в случае отстутствия ключа должна генерироваться ошибка std::out_of_range. 
      
Вот пример тестовой программы, демонстрирующей работу этих функций: https://clck.ru/FNE2f. 
      
Вы можете воспользоваться контейнером std::map для реализации класса (в частности, можно считать, что на ключах определён
         operator <). 
      


Примечания

Сдайте в систему только код класса BiMap без функции main. Подключите все необходимые для вашей реализации библиотеки.
