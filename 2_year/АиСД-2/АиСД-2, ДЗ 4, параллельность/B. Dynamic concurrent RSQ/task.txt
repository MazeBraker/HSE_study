

B. Dynamic concurrent RSQ


Ограничение времени
1 секунда


Ограничение памяти
64Mb


Ввод
стандартный ввод или input.txt


Вывод
стандартный вывод или output.txt





Вам даны набор целых чисел vector<int> numbers и набор запросов к нему vector<Request> requests, где Request — запрос на вычисление суммы или прибавление к элементу:
         struct ComputeRequest { int left; int right; };
struct UpdateRequest { int index; int delta; };
using Request = variant<ComputeRequest, UpdateRequest>;
Необходимо найти ответ на каждый запрос ComputeRequest — сумму чисел numbers[left], ... , numbers[right - 1]. Запрос UpdateRequest означает операцию numbers[index] += value.
      
Отправьте на проверку заголовочный файл, содержащий определение структуры Request, любые вспомогательные функции и классы, а также функцию ProcessRequests следующего вида:
      
vector<int> ProcessRequests(const vector<int>& numbers, const vector<Request>& requests);
Отправленный вами код не должен содержать функцию main.
      
Пример использования: https://pastebin.com/mXxZy6bE

Формат ввода

Для каждого запроса ComputeRequest гарантируется, что: 
            
границы запроса корректны, то есть 0 <= request.left < numbers.size() и 0 < request.right <= numbers.size(); 
               
полуинтервал запроса непуст, то есть request.left < request.right; 
               

Для каждого запроса UpdateRequest гарантируется, что индекс обновляемого элемента корректен: 0 <= request.index < numbers.size().
      
Все значения элементов после увеличения, а также сумма в любой момент на любом подотрезке помещается в тип int.
      
При выстраивании схемы ускорения кода вы можете полагаться на то, что запросы в векторе requests разбиваются на не более чем 10 блоков подряд идущих запросов одного типа. Таким образом, при большом количестве запросов,
         как правило, подряд будет идти много запросов ComputeRequest, затем много UpdateRequest и т. д.
      

Формат вывода

Верните vector<int> — вектор ответов на запросы ComputeRequest в порядке, в котором они упоминаются в векторе requests.
         
Примечания

Ваше решение проверяется вручную. При отправке его в контест вы должны получить вердикт CE: из-за отсутствия функции main или недоступности необходимых заголовочных файлов.
         Вам доступны заголовочные файлы <execution>, <future>, <mutex> и другая функциональность в соответствии со стандартом C++17.
      
Ваше решение будет засчитано, если: 
         
проходит юнит-тесты, проверяюще корректность работы функции ProcessRequests; 
            
на достаточно больших векторах выигрывает у стандартного однопоточного решения с деревом отрезков в среднем минимум на 30
               %. 
            


Когда ваше решение будет проверено, его вердикт будет изменён. Если решение не скомпилировалось у проверяющего, вердикт будет
         изменён на «Manual Inspection». С вопросами обращайтесь к своему ассистенту или отправляйте вопросы в контесте.
      

